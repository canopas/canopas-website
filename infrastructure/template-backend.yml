AWSTemplateFormatVersion: 2010-09-09
Description: A golang web service deployed to AWS Lambda.

Parameters:
  EnvName:
    Type: String
    Description: Name of an environment. 'dev', 'staging', 'prod' and any name.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  CustomDomainName:
    Type: String
    Description: Name of the custom domain
  Sender:
    Type: String
    Description: Email address of sender.
  JobsReceiver:
    Type: String
    Description: Email address of jobs receiver.
  ContactReceiver:
    Type: String
    Description: Email address of conatct receiver.
  AccessKeyId:
    Type: String
    Description: access-key-id.
  SecretAccessKey:
    Type: String
    Description: secret-access-key.
  Region:
    Type: String
    Description: aws-region.
  DbUsername:
    Type: String
    Description: Mysql database username.
  DbPassword:
    Type: String
    Description: Mysql database password.
  DbHost:
    Type: String
    Description: Mysql database host.
  DbPort:
    Type: String
    Description: Mysql database port.
  DbName:
    Type: String
    Description: Mysql database name.
  LambdaHandlerPath:
    Type: String
    Description: Path of a Lambda Handler.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  LambdaZipFilePath:
    Type: String
    Description: Path of a Lambda function zip file.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  ApiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: prod

Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaRole-${EnvName}
  LambdaFunctionName:
    Value:
      Ref: LambdaFunction
  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaARN-${EnvName}
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-role-canopas-website-v1-${EnvName}
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: fun-canopas-website-v1-${EnvName}
      Description: LambdaFunction of canopas website v1 - golang
      Runtime: go1.x
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref LambdaZipFilePath
      Handler: main
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      VpcConfig:
        SecurityGroupIds:
          - sg-08962f43eb26cf253
        SubnetIds:
          - subnet-016b1da82d8102565
          - subnet-0d8441776ccc7e8a4
      Environment:
        Variables:
          ENV:
            Fn::Sub: ${EnvName}
          SENDER:
            Fn::Sub: ${Sender}
          JOBS_RECEIVER:
            Fn::Sub: ${JobsReceiver}
          CONTACT_RECEIVER:
            Fn::Sub: ${ContactReceiver}
          ACCESS_KEY_ID:
            Fn::Sub: ${AccessKeyId}
          SECRET_ACCESS_KEY:
            Fn::Sub: ${SecretAccessKey}
          REGION:
            Fn::Sub: ${Region}
          DB_USERNAME:
            Fn::Sub: ${DbUsername}
          DB_PASSWORD:
            Fn::Sub: ${DbPassword}
          DB_HOST:
            Fn::Sub: ${DbHost}
          DB_PORT:
            Fn::Sub: ${DbPort}
          DB_NAME:
            Fn::Sub: ${DbName}
          TZ: UTC
          GIN_MODE: release

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Canopas website API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes: ["*/*"]
      DisableExecuteApiEndpoint: true
      MinimumCompressionSize: 100
      Name:
        Fn::Sub: rest-api-canopas-website-v1-${EnvName}

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway

  ApiGatewayRootResource:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - ApiGatewayRootMethod
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{proxy+}"

  ApiGatewayResourceProxyMethod:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ApiGatewayRootResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn
      ResourceId: !Ref ApiGatewayRootResource
      RestApiId: !Ref ApiGateway

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayResourceProxyMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName

  ApiGatewayCustomDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      DomainName: !Ref CustomDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGatewayStageName
